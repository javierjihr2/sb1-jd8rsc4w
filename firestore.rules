rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funciones de utilidad
    function isSignedIn() { return request.auth != null; }
    function isOwner(uid) { return isSignedIn() && request.auth.uid == uid; }
    
    // Función para verificar si es super administrador
    function isSuperAdmin() {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/superAdmins/$(request.auth.uid)).data.active == true &&
             request.time < get(/databases/$(database)/documents/superAdmins/$(request.auth.uid)).data.expiresAt;
    }
    
    // Función para verificar si es administrador
    function isAdmin() {
      return isSignedIn() && (
        isSuperAdmin() ||
        (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.active == true)
      );
    }
    
    // Función para verificar si es moderador o superior
    function isModerator() {
      return isAdmin() || (
        isSignedIn() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role in ['Moderator', 'Admin']
      );
    }
    
    // Función para validar datos de entrada
    function isValidString(value, maxLength) {
      return value is string && value.size() <= maxLength && value.size() > 0;
    }
    
    function isValidEmail(email) {
      return email is string && email.matches('.*@.*\\..*') && email.size() <= 255;
    }
    
    // Función para detectar contenido malicioso básico
    function isSafeContent(content) {
      return content is string && 
        !content.matches('.*(<script|javascript:|vbscript:|on\\w+\\s*=).*') &&
        !content.matches('.*(union|select|insert|update|delete|drop|create|alter).*') &&
        !content.matches('.*(\'|\\-\\-|;|\\||\\*).*');
    }
    
    // Reglas para usuarios
    match /users/{uid} {
      allow read: if isSignedIn();
      allow create, update, delete: if isOwner(uid);
    }
    
    // Reglas para publicaciones
    match /posts/{postId} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && request.auth.uid == request.resource.data.authorId;
      
      match /comments/{commentId} {
        allow read: if true;
        allow create, update, delete: if isSignedIn() && request.auth.uid == request.resource.data.authorId;
      }
      
      match /likes/{uid} {
        allow read: if true;
        allow create, delete: if isOwner(uid);
      }
    }
    
    // Reglas para bookmarks de usuarios
    match /users/{uid}/bookmarks/{postId} {
      allow read, create, delete: if isOwner(uid);
    }
    
    // Reglas para torneos
    match /tournaments/{tid} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if request.auth.uid == resource.data.ownerId;
      
      match /participants/{pid} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && (request.auth.uid == resource.data.captainId || request.auth.uid == get(/databases/$(database)/documents/tournaments/$(tid)).data.ownerId);
      }
      
      match /matches/{mid} {
        allow read: if true;
        allow create, update: if isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/tournaments/$(tid)).data.ownerId;
        allow delete: if isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/tournaments/$(tid)).data.ownerId;
      }
    }
    
    // Reglas para tickets de matchmaking
    match /matchTickets/{ticketId} {
      allow read, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // Reglas para matches
    match /matches/{matchId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn() && request.auth.uid in request.resource.data.members;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.leaderId;
    }
    
    // Reglas para notificaciones de usuarios
    match /users/{uid}/notifications/{nid} {
      allow read, update: if isOwner(uid);
    }
    
    // Reglas para administradores
    match /admins/{adminId} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() && request.resource.data.keys().hasAll(['role', 'assignedBy', 'assignedAt']);
      allow update: if isSuperAdmin() && request.resource.data.keys().hasAll(['role', 'assignedBy', 'assignedAt']);
      allow delete: if isSuperAdmin();
    }
    
    // Reglas para configuración de super admin
    match /config/superAdmin {
      allow read: if isSignedIn();
      allow write: if isSuperAdmin();
    }
    
    // Reglas para estadísticas públicas (acceso de solo lectura)
    match /stats/{statId} {
      allow read: if true; // Permitir lectura pública de estadísticas
      allow write: if isAdmin();
    }
    
    // Reglas para configuración de monetización (acceso público de lectura)
    match /config/monetization {
      allow read: if true; // Permitir lectura pública de configuración
      allow write: if isSuperAdmin();
    }
    
    // Reglas para configuración general de la app
    match /config/{configId} {
      allow read: if true; // Permitir lectura pública de configuración básica
      allow write: if isAdmin();
    }
    
    // Reglas para logs de administración
    match /adminLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isSignedIn();
    }
    
    // Denegar acceso a cualquier otra colección no especificada
    match /{document=**} {
      allow read, write: if false;
    }
  }
}