rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ===== FUNCIONES DE UTILIDAD =====
    
    // Funciones básicas de autenticación
    function isSignedIn() { return request.auth != null; }
    function isOwner(uid) { return isSignedIn() && request.auth.uid == uid; }
    
    // Función para verificar si es super administrador
    function isSuperAdmin() {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/superAdmins/$(request.auth.uid)).data.active == true &&
             request.time < get(/databases/$(database)/documents/superAdmins/$(request.auth.uid)).data.expiresAt;
    }
    
    // Función para verificar si es administrador
    function isAdmin() {
      return isSignedIn() && (
        isSuperAdmin() ||
        (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.active == true)
      );
    }
    
    // Función para verificar si es moderador o superior
    function isModerator() {
      return isAdmin() || (
        isSignedIn() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role in ['Moderator', 'Admin']
      );
    }
    
    // ===== FUNCIONES DE VALIDACIÓN =====
    
    // Validación de strings
    function isValidString(value, maxLength) {
      return value is string && value.size() <= maxLength && value.size() > 0;
    }
    
    // Validación de email
    function isValidEmail(email) {
      return email is string && email.matches('.*@.*\\..*') && email.size() <= 255;
    }
    
    // Función para detectar contenido malicioso
    function isSafeContent(content) {
      return content is string && 
        !content.matches('.*(<script|javascript:|vbscript:|on\\w+\\s*=).*') &&
        !content.matches('.*(union|select|insert|update|delete|drop|create|alter).*') &&
        !content.matches('.*(\'|\\-\\-|;|\\||\\*).*');
    }
    
    // Validación de datos de usuario
    function isValidUserData(data) {
      return data.keys().hasAll(['email', 'displayName', 'createdAt']) &&
             isValidEmail(data.email) &&
             isValidString(data.displayName, 100) &&
             data.createdAt is timestamp &&
             (!('bio' in data) || isValidString(data.bio, 500)) &&
             (!('website' in data) || isValidString(data.website, 200));
    }
    
    // Validación de posts
    function isValidPost(data) {
      return data.keys().hasAll(['title', 'content', 'authorId', 'createdAt', 'status']) &&
             isValidString(data.title, 200) &&
             isValidString(data.content, 5000) &&
             isSafeContent(data.content) &&
             data.authorId == request.auth.uid &&
             data.createdAt is timestamp &&
             data.status in ['draft', 'published', 'archived'] &&
             (!('tags' in data) || (data.tags is list && data.tags.size() <= 10));
    }
    
    // Validación de comentarios
    function isValidComment(data) {
      return data.keys().hasAll(['content', 'authorId', 'createdAt']) &&
             isValidString(data.content, 1000) &&
             isSafeContent(data.content) &&
             data.authorId == request.auth.uid &&
             data.createdAt is timestamp;
    }
    
    // Validación de torneos
    function isValidTournament(data) {
      return data.keys().hasAll(['name', 'description', 'ownerId', 'createdAt', 'status']) &&
             isValidString(data.name, 100) &&
             isValidString(data.description, 1000) &&
             data.ownerId == request.auth.uid &&
             data.createdAt is timestamp &&
             data.status in ['draft', 'open', 'in_progress', 'completed', 'cancelled'] &&
             (!('maxParticipants' in data) || (data.maxParticipants is int && data.maxParticipants > 0 && data.maxParticipants <= 1000));
    }
    
    // ===== FUNCIONES DE RATE LIMITING =====
    
    // Verificar límites de creación (básico)
    function withinCreationLimit() {
      // Permitir hasta 10 creaciones por hora por usuario
      return !exists(/databases/$(database)/documents/rateLimits/$(request.auth.uid)) ||
             request.time > get(/databases/$(database)/documents/rateLimits/$(request.auth.uid)).data.resetTime ||
             get(/databases/$(database)/documents/rateLimits/$(request.auth.uid)).data.count < 10;
    }
    
    // ===== REGLAS DE SEGURIDAD =====
    
    // Reglas para usuarios
    match /users/{uid} {
      allow read: if isSignedIn() && (isOwner(uid) || isAdmin());
      allow create: if isOwner(uid) && isValidUserData(request.resource.data) && withinCreationLimit();
      allow update: if isOwner(uid) && isValidUserData(request.resource.data);
      allow delete: if isOwner(uid) || isSuperAdmin();
    }
    
    // Reglas para perfiles públicos (datos limitados)
    match /publicProfiles/{uid} {
      allow read: if isSignedIn();
      allow write: if isOwner(uid) && 
                      request.resource.data.keys().hasAll(['displayName', 'avatar']) &&
                      isValidString(request.resource.data.displayName, 100);
    }
    
    // Reglas para publicaciones
    match /posts/{postId} {
      allow read: if resource.data.status == 'published' || 
                     (isSignedIn() && (request.auth.uid == resource.data.authorId || isAdmin()));
      allow create: if isSignedIn() && isValidPost(request.resource.data) && withinCreationLimit();
      allow update: if isSignedIn() && 
                       request.auth.uid == resource.data.authorId &&
                       isValidPost(request.resource.data);
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.authorId || isModerator());
      
      // Comentarios de posts
      match /comments/{commentId} {
        allow read: if true; // Los comentarios son públicos si el post es público
        allow create: if isSignedIn() && isValidComment(request.resource.data) && withinCreationLimit();
        allow update: if isSignedIn() && 
                         request.auth.uid == resource.data.authorId &&
                         isValidComment(request.resource.data);
        allow delete: if isSignedIn() && (request.auth.uid == resource.data.authorId || isModerator());
      }
      
      // Likes de posts
      match /likes/{uid} {
        allow read: if true;
        allow create, delete: if isOwner(uid);
      }
    }
    
    // Reglas para bookmarks de usuarios
    match /users/{uid}/bookmarks/{postId} {
      allow read, create, delete: if isOwner(uid);
    }
    
    // Reglas para torneos
    match /tournaments/{tid} {
      allow read: if resource.data.status in ['open', 'in_progress', 'completed'] || 
                     (isSignedIn() && (request.auth.uid == resource.data.ownerId || isAdmin()));
      allow create: if isSignedIn() && isValidTournament(request.resource.data) && withinCreationLimit();
      allow update: if isSignedIn() && 
                       (request.auth.uid == resource.data.ownerId || isAdmin()) &&
                       isValidTournament(request.resource.data);
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.ownerId || isModerator());
      
      // Participantes de torneos
      match /participants/{pid} {
        allow read: if true; // Los participantes son públicos
        allow create: if isSignedIn() && 
                         request.resource.data.keys().hasAll(['userId', 'joinedAt']) &&
                         request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && 
                         (request.auth.uid == resource.data.userId || 
                          request.auth.uid == get(/databases/$(database)/documents/tournaments/$(tid)).data.ownerId ||
                          isAdmin());
        allow delete: if isSignedIn() && 
                         (request.auth.uid == resource.data.userId ||
                          request.auth.uid == get(/databases/$(database)/documents/tournaments/$(tid)).data.ownerId ||
                          isModerator());
      }
      
      // Matches de torneos
      match /matches/{mid} {
        allow read: if true;
        allow create, update: if isSignedIn() && 
                                 (request.auth.uid == get(/databases/$(database)/documents/tournaments/$(tid)).data.ownerId ||
                                  isAdmin());
        allow delete: if isSignedIn() && 
                         (request.auth.uid == get(/databases/$(database)/documents/tournaments/$(tid)).data.ownerId ||
                          isModerator());
      }
    }
    
    // Reglas para tickets de matchmaking
    match /matchTickets/{ticketId} {
      allow read: if isSignedIn() && 
                     (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isSignedIn() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'gameMode', 'createdAt']) &&
                       withinCreationLimit();
      allow update: if false; // Los tickets no se pueden actualizar
      allow delete: if isSignedIn() && 
                       (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Reglas para matches
    match /matches/{matchId} {
      allow read: if isSignedIn() && 
                     (request.auth.uid in resource.data.participants || isAdmin());
      allow create: if isSignedIn() && 
                       request.auth.uid in request.resource.data.participants &&
                       request.resource.data.keys().hasAll(['participants', 'gameMode', 'createdAt']);
      allow update: if isSignedIn() && 
                       request.auth.uid in resource.data.participants &&
                       request.resource.data.keys().hasAll(['participants', 'gameMode', 'createdAt']);
      allow delete: if isSignedIn() && 
                       (request.auth.uid == resource.data.leaderId || isAdmin());
    }
    
    // Reglas para notificaciones de usuarios
    match /users/{uid}/notifications/{nid} {
      allow read, update: if isOwner(uid);
      allow create: if isAdmin(); // Solo admins pueden crear notificaciones
      allow delete: if isOwner(uid) || isAdmin();
    }
    
    // Reglas para administradores
    match /admins/{adminId} {
      allow read: if isSignedIn() && (isOwner(adminId) || isAdmin());
      allow create: if isSuperAdmin() && 
                       request.resource.data.keys().hasAll(['role', 'assignedBy', 'assignedAt', 'active']) &&
                       request.resource.data.assignedBy == request.auth.uid;
      allow update: if isSuperAdmin() && 
                       request.resource.data.keys().hasAll(['role', 'assignedBy', 'assignedAt', 'active']);
      allow delete: if isSuperAdmin();
    }
    
    // Reglas para super administradores
    match /superAdmins/{adminId} {
      allow read: if isSuperAdmin();
      allow write: if false; // Solo se pueden crear manualmente
    }
    
    // Reglas para configuración pública
    match /config/public {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Reglas para configuración de monetización (restringida)
    match /config/monetization {
      allow read: if isSignedIn(); // Solo usuarios autenticados
      allow write: if isSuperAdmin();
    }
    
    // Reglas para configuración general de la app
    match /config/{configId} {
      allow read: if isSignedIn(); // Restringir a usuarios autenticados
      allow write: if isAdmin();
    }
    
    // Reglas para estadísticas públicas
    match /stats/public {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Reglas para estadísticas privadas
    match /stats/{statId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Reglas para logs de administración (mejoradas)
    match /adminLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin() && 
                       request.resource.data.keys().hasAll(['action', 'adminId', 'timestamp', 'details']) &&
                       request.resource.data.adminId == request.auth.uid &&
                       request.resource.data.timestamp == request.time;
      allow update, delete: if false; // Los logs son inmutables
    }
    
    // Reglas para rate limiting
    match /rateLimits/{uid} {
      allow read, write: if isOwner(uid) || isAdmin();
    }
    
    // Reglas para reportes de usuarios
    match /reports/{reportId} {
      allow read: if isModerator();
      allow create: if isSignedIn() && 
                       request.resource.data.keys().hasAll(['reportedBy', 'targetType', 'targetId', 'reason', 'createdAt']) &&
                       request.resource.data.reportedBy == request.auth.uid &&
                       withinCreationLimit();
      allow update: if isModerator();
      allow delete: if isAdmin();
    }
    
    // Reglas para sesiones de usuario (tracking de actividad)
    match /userSessions/{sessionId} {
      allow read, write: if isSignedIn() && 
                            request.resource.data.userId == request.auth.uid;
    }
    
    // Denegar acceso a cualquier otra colección no especificada
    match /{document=**} {
      allow read, write: if false;
    }
  }
}